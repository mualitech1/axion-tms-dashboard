{
  "name": "AetherForge Quantum Agent Telemetry and Response",
  "nodes": [
    {
      "id": "22",
      "name": "Generate Viz & Log Telemetry",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [100, 100],
      "parameters": {
        "functionCode": "const generateVisualizationMetadata = (agentData) => { \n     const agentBase = agentData.agentBaseData || {}; const ol=agentBase.orbital_level||1;\n     const orbitalColors = ['#3498db','#9b59b6','#f1c40f','#e74c3c','#2ecc71','#1abc9c','#e67e22','#34495e'];\n     const typeShapes = {'workflow':'circle','script':'square','monitor':'triangle','security':'diamond','microservice':'hexagon'};\n     const orbitalIndex = Math.min(ol-1,orbitalColors.length-1); const baseColor=orbitalColors[orbitalIndex];\n     const parseHex = h => ({r:parseInt(h.slice(1,3),16),g:parseInt(h.slice(3,5),16),b:parseInt(h.slice(5,7),16)}); const toHex = ({r,g,b})=>`#${r.toString(16).padStart(2,'0')}${g.toString(16).padStart(2,'0')}${b.toString(16).padStart(2,'0')}`;\n     const baseRgb=parseHex(baseColor); const idVal=parseInt((agentBase.id||'0').substring(0,6),16); const cVar=idVal%30-15;\n     const finalRgb={r:Math.max(0,Math.min(255,baseRgb.r+cVar)),g:Math.max(0,Math.min(255,baseRgb.g+cVar)),b:Math.max(0,Math.min(255,baseRgb.b+cVar))}; const finalColor=toHex(finalRgb);\n     const capsL=(agentBase.capabilities||[]).length; const baseSize=5+capsL*2; const size=baseSize*Math.sqrt((agentBase.bohr_radius||1)/(ol||1));\n     const entangled=agentData.entangled_agents||[]; const pos=agentData.orbital_position?.position||{x:0,y:0,z:0};\n     return { rendering:{color:finalColor, shape:typeShapes[agentBase.type]||'circle',size:Math.max(1,Math.round(size)),glow:entangled.length>0?'true':'false',glow_intensity:entangled.length*0.2,glow_color:finalColor}, animation:{orbit_speed:1/Math.sqrt(agentBase.bohr_radius||1),pulse_rate:capsL*0.5,entanglement_lines:entangled}, position_3d:{x:pos.x,y:pos.y,z:pos.z}, labels:{name:agentBase.name,type:agentBase.type,orbital:`L${ol}`,capabilities_count:capsL} };\n}; \n\nconst agentData = $input.item.json;\nconst vizMeta = generateVisualizationMetadata(agentData);\n\nconst telemetryData = {\n  agent_id: agentData.agentId,\n  timestamp: new Date().toISOString(),\n  metric_name: 'agent_creation_complete',\n  metric_value: 1,\n  orbital_level: agentData.agentBaseData?.orbital_level,\n  bohr_radius: agentData.agentBaseData?.bohr_radius,\n  energy_consumption: 0.1,\n  quantum_efficiency: parseFloat(agentData.quantum_state?.coherence || 0),\n  execution_context: { source: 'n8n_workflow', trigger: 'api', blueprint_used: agentData.blueprint?.id || 'dynamic' }\n};\n\nitem.json.visualization_metadata = vizMeta;\nitem.json.telemetry_log = telemetryData;\nreturn item;"
      },
      "connections": { "main": [ [ { "node": "24", "input": "main" } ] ] }
    },
    {
      "id": "24",
      "name": "Insert Telemetry Log",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [300, 100],
      "credentials": { "supabaseApi": { "id": "YOUR_SUPABASE_CREDENTIAL_ID", "name": "Supabase account" } },
      "parameters": {
        "operation": "insert",
        "from": "agent_telemetry",
        "data": "={{ $json.telemetry_log }}"
      },
      "connections": { "main": [ [ { "node": "23", "input": "main" } ] ] }
    },
    {
      "id": "23",
      "name": "Generate Quantum Ontology & Respond",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [500, 100],
      "parameters": {
        "functionCode": "const generateQuantumOntology = (agentData, ecosystemData, vizMeta) => {\n    const agentBase=agentData.agentBaseData||{}; const qs=agentData.quantum_state||{}; const op=agentData.orbital_position||{}; const et=agentData.evolution_trajectory||{}; const eco=ecosystemData.ecosystem_metrics||{}; const caps=agentBase.capabilities||[]; const entangled=agentData.entangled_agents||[]; const ol=agentBase.orbital_level||1;\n    return {\n      quantum_agent: { id:agentData.agentId, name:agentBase.name, type:agentBase.type, quantum_signature:agentBase.quantum_signature,\n        wave_function:{orbital_level:ol, bohr_radius:agentBase.bohr_radius, energy_level:agentBase.energy_level, superposition_states:qs.base_states||['stable'], amplitudes:qs.amplitudes||['1.0'], phase_angles:qs.phases||['0.0'], collapse_probability:(0.05*ol).toFixed(3)},\n        capabilities:{active:caps, vector:agentBase.capability_vector, potential:[], acquisition_rate:(0.01*(eco.total_active_agents||10)).toFixed(4)},\n        entanglement:{entangled_agents:entangled, entanglement_strength:entangled.length>0?0.8:0, coherence_time_ms:86400000, decoherence_rate:(0.01*ol).toFixed(4)},\n        orbital_mechanics:{position:op.position, velocity:op.velocity, acceleration:{ax:0,ay:0,az:0}, mass:1.0+(0.1*caps.length)},\n        habitats:agentData.habitat_assignment?[agentData.habitat_assignment.primary, agentData.habitat_assignment.secondary].filter(h=>h):[],\n        evolution:{current_stage:et.current_evolutionary_stage||`orbital_${ol}`, next_stage:et.optimal_path?.name||'unknown', progress:0}\n      },\n      ecosystem_quantum_field:{global_coherence:eco.global_coherence||'1.0', stability_index:eco.stability_index||'1.0', orbital_occupancy:eco.orbital_occupancies||{}, evolutionary_pressure:eco.evolutionary_pressure||'0.2'},\n      visualization:{...vizMeta, ecosystem:{coherence_field_color:parseFloat(eco.global_coherence||1.0)>0.7?'#2ecc71':(parseFloat(eco.global_coherence||1.0)>0.4?'#f39c12':'#e74c3c'), background_energy:(parseFloat(eco.stability_index||1.0)*0.5).toFixed(2), entanglement_web_density:Math.min(1.0,(eco.total_active_agents||10)/30).toFixed(2)}}\n    };\n};\n\nconst agentData = $input.item.json;\nconst ecosystemData = agentData;\nconst vizMeta = agentData.visualization_metadata;\nconst ontology = generateQuantumOntology(agentData, ecosystemData, vizMeta);\n\nitem.json = { success: true, message: 'Quantum agent created successfully', ontology: ontology };\nreturn item;"
      },
      "connections": { "main": [ [ { "node": "25", "input": "main" } ] ] }
    },
    {
      "id": "25",
      "name": "Respond Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [700, 100],
      "parameters": {
        "responseCode": 201,
        "responseData": "={{ $json }}"
      }
    }
  ],
  "connections": {}
} 